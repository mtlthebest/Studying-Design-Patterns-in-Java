/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.LinkedHashMap;
import java.util.Map;
import static java.awt.RenderingHints.KEY_ANTIALIASING;
import static java.awt.RenderingHints.VALUE_ANTIALIAS_ON;
import observer.Observer;

/**
 *
 * @author shintaro
 */
public class PieChart extends javax.swing.JPanel implements Observer{

    private static final int C00 = 200;
    private static final int C01 = 200;
    private static final int C02 = 20;  // グラフの表示位置(x方向、y方向兼用)
    private static final int C03 = 5;   // 影のずらし間隔(x方向、y方向兼用)
    private static final int C04 = 150;
    private Color I00 = new Color(64, 64, 64);    // 影とふちの色
    private Color colorA = new Color(255, 32, 32);
    private Color colorB = new Color(64, 192, 32);
    private Color colorC = new Color(96, 32, 255);
    
    private Map<Color, Integer> I01;
    private int I02;
    private ControlPanel controlPanel;
    
    
    /**
     * Creates new form CircleGraphPanel
     */
    public PieChart(ControlPanel controlPanel) {
        
        this.controlPanel = controlPanel;
        
        initComponents();
        setBackground(Color.white);
        setPreferredSize(new Dimension(C00, C01));

        I01 = new LinkedHashMap<Color, Integer>();
        setRates();
    }
    
    private void setRates(){
        I01.put(colorA, controlPanel.getA());
        I01.put(colorB, controlPanel.getB());
        I01.put(colorC, controlPanel.getC());
        I02 = 0;
        for (int L01 : I01.values()) {
            I02 += L01;
        }
    }

    public void paintComponent(Graphics A00) {
        
        super.paintComponent(A00);

        Graphics2D L00 = (Graphics2D) A00;
        L00.setRenderingHint(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON);

        L00.setColor(I00);
        L00.fillOval(C02 + C03, C02 + C03, C04, C04);

        int L01 = 90;   // 円グラフの描画開始角度
        int L02 = 0;    // 扇形の中心角

        setRates();
        
        for (Color L03 : I01.keySet()) {
            L02 = Math.round(360f * I01.get(L03) / I02);
            L01 -= L02;
            L00.setColor(L03);
            L00.fillArc(C02, C02, C04, C04, L01, L02);
        }
        // 四捨五入の都合で塗り残しが出た場合の対処
        L00.fillArc(C02, C02, C04, C04, -270, L02);

        L00.setColor(I00);
        L00.drawOval(C02, C02, C04, C04);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void nortify() {
        this.repaint();
    }

}
